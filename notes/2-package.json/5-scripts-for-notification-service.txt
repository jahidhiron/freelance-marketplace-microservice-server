"scripts": {
    "dev": "nodemon -r tsconfig-paths/register src/app.ts | pino-pretty -c",
    "build": "tsc --project tsconfig.json && tsc-alias -p tsconfig.json"
},


The scripts section in your package.json file contains custom commands that you can run 
using npm run or yarn. The scripts you've defined have specific purposes for development 
and build processes in your TypeScript Node.js project. Here's a breakdown of what each 
script does:

1. "dev": "nodemon -r tsconfig-paths/register src/app.ts | pino-pretty -c"

Purpose: 
This script is designed for running your application in development mode with live 
reloading and enhanced logging.

Components Breakdown:

nodemon:
nodemon is a tool that automatically restarts your Node.js application when file 
changes are detected. This is useful for development because it eliminates the 
need to manually restart the server whenever you make changes to your code.

-r tsconfig-paths/register:
The -r flag tells nodemon to require a module before running your application. 
Here, it's requiring tsconfig-paths/register, which is a module that adds support 
for path aliases defined in your tsconfig.json. This ensures that your TypeScript 
path aliases work properly at runtime.

src/app.ts:
This is the entry point of your application. nodemon will run this file, and it 
will be reloaded whenever changes are detected.

| pino-pretty -c:
| is a pipe operator, which takes the output of the previous command (in this case, 
the output from running app.ts) and passes it to the next command.
pino-pretty is a tool that prettifies the logs generated by the Pino logger. 
Pino is a fast and low-overhead logging library for Node.js. The -c flag 
applies colorization to the logs, making them easier to read in the terminal.


"build": "tsc --project tsconfig.json && tsc-alias -p tsconfig.json"

Purpose: 
This script is used for building your TypeScript project into JavaScript, ready for production deployment.

Components Breakdown:

tsc --project tsconfig.json:
tsc stands for TypeScript Compiler. This command compiles your TypeScript code to JavaScript. 
The --project tsconfig.json flag tells the compiler to use the specified tsconfig.json file 
for configuration.

&&:
This is a logical AND operator used to chain commands. It ensures that the second 
command (tsc-alias) only runs if the first command (tsc) is successful.

tsc-alias -p tsconfig.json:
tsc-alias is a tool that resolves TypeScript path aliases in the compiled JavaScript 
files. After TypeScript compiles your code, path aliases might still be present in 
the output, which can cause issues when running the compiled code. tsc-alias replaces 
these path aliases with the correct relative paths.
The -p tsconfig.json flag specifies which tsconfig.json file to use.